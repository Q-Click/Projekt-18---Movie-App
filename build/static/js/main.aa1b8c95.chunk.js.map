{"version":3,"sources":["components/Header.js","components/Input.js","components/Footer.js","components/NoResult.js","components/Movie.js","components/Details.js","assests/config.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Input","type","placeholder","onChange","e","props","change","id","Footer","href","NoResult","this","click","onClick","Movie","movies","err","push","key","movie","length","map","m","i","src","poster","alt","selClick","rating","toFixed","title","slice","genre","search","Details","lang","released","join","overview","api","baseURl","mountURL","changeURL","fallBackURL","genreURL","App","state","queryError","selectedMovie","select","data","poster_path","vote_average","name","gen","genre_ids","release_date","original_language","target","value","url","axios","get","then","res","results","movs","result","filterResult","setState","catch","genres","genId","x","samp","selectClick","clickFallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa1b8c95.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <Fragment>\n        <div className=\"header\">\n          <h1>Filmopedia</h1>\n          <p>\n            Welcome to the world's best movie library. This app is using the\n            MovieDB database to render data and movie information.\n          </p>\n        </div>\n      </Fragment>\n    );\n  }\n}\nexport default Header;\n","import React, {Component} from 'react'\n\nclass Input extends Component{\n  render(){\n    return (\n      <div className='inputbtn'>\n        <div className=\"input-group mb-3\">\n          <input \n            type=\"text\" \n            className=\"form-control\" \n            placeholder=\"Enter Movie Title\"\n            onChange={(e)=>this.props.change(e)}/>\n          <div className=\"input-group-append search-btn\">\n            <span className=\"input-group-text\" id=\"basic-addon2\">Search Movie</span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Input","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <div className=\"line\"></div>\n        <div className=\"footDesc\">\n          <h5>filmopedia.com</h5>\n          <p>\n            This is another ReactJS project created to practice. It uses MovieDB\n            to render data. If you want to view the source code of this app you\n            can view it here. If you like this app, please give a like{\" \"}\n            <a href=\"sample.com\">here</a>\n          </p>\n        </div>\n        <div className=\"footcopy\">\n          <p>2020 Â© All rights reserved. Q-Click</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Footer;\n","import React, {Component} from 'react'\n\nclass NoResult extends Component{\n  clicked(){\n    this.props.click()\n  }\n  render(){\n    return (\n      <div className='fallBack'>\n        <h5>No results found.</h5>\n        <p>Wanna try most <b onClick={this.props.click}>searched movies</b> instead?</p>\n      </div>\n    )\n  }\n}\nexport default NoResult","import React, { Component, Fragment } from \"react\";\nimport Fallback from \"./NoResult\";\n\nclass Movie extends Component {\n  render() {\n    let movies = [];\n    if (this.props.err) {\n      movies.push(<Fallback click={this.props.click} key={1} />);\n    } else if (this.props.movie.length === 0) {\n      movies.push(<Fallback click={this.props.click} key={1} />);\n    } else if (this.props.movie) {\n      this.props.movie.map((m, i) => {\n        return movies.push(\n          <div className=\"movie\" key={i}>\n            <div className=\"card\">\n              <img\n                className=\"card-img-top\"\n                src={`https://image.tmdb.org/t/p/w200/${m.poster}`}\n                alt=\"123\"\n                onClick={() => this.props.selClick(m)}\n              />\n              <div className=\"rating\">{m.rating.toFixed(1)}</div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">\n                  {m.title.length > 20 ? m.title.slice(0, 25) + \"...\" : m.title}\n                </h5>\n                <p className=\"card-text\">\n                  {m.genre.length > 1\n                    ? `${m.genre[0]}, ${m.genre[1]}`\n                    : m.genre[0]}\n                </p>\n              </div>\n            </div>\n          </div>\n        );\n      });\n    }\n    return (\n      <Fragment>\n        <div className=\"bodyHead\">\n          <h5>{this.props.search ? \"Search Results\" : \"Trending Movies\"}</h5>\n        </div>\n        {movies}\n      </Fragment>\n    );\n  }\n}\nexport default Movie;\n","import React, { Component } from \"react\";\n\nclass Details extends Component {\n  render() {\n    return (\n      <div className=\"details\">\n        <img\n          src={`https://image.tmdb.org/t/p/w200/${this.props.movie.poster}`}\n          alt=\"\"\n        />\n        <h5>\n          Title:\n          <b className=\"textDetail\">{this.props.movie.title}</b>\n        </h5>\n        <h5>\n          Rating:\n          <b className=\"textDetail\">{this.props.movie.rating.toFixed(1)}</b>\n        </h5>\n        <h5>\n          Language:\n          <b className=\"textDetail\">{this.props.movie.lang}</b>\n        </h5>\n        <h5>\n          Date released:\n          <b className=\"textDetail\">{this.props.movie.released}</b>\n        </h5>\n        <h5>\n          Genre:\n          <b className=\"textDetail\">{this.props.movie.genre.join(\", \")}</b>\n        </h5>\n        <h5>\n          Overview:\n          <b className=\"textDetail\">{this.props.movie.overview}</b>\n        </h5>\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-primary\"\n          onClick={() => this.props.selClick([])}>\n          Go back to searched movies\n        </button>\n      </div>\n    );\n  }\n}\nexport default Details;\n","export const api = \"fc7344ab0fdd88a34f1d8baf20d3e692\";\n\nconst baseURl = `https://api.themoviedb.org/3`;\n\nexport const mountURL = `${baseURl}/trending/movie/day?api_key=${api}`;\nexport const changeURL = `${baseURl}/search/movie?query=`;\nexport const fallBackURL = `${baseURl}/trending/tv/week?api_key=${api}`;\nexport const genreURL = `${baseURl}/genre/movie/list?language=en-US&api_key=${api}`;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nimport Header from \"./components/Header\";\nimport Input from \"./components/Input\";\nimport Footer from \"./components/Footer\";\nimport Movie from \"./components/Movie\";\nimport Details from \"./components/Details\";\n\nimport {\n  api,\n  mountURL,\n  changeURL,\n  fallBackURL,\n  genreURL,\n} from \"./assests/config\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      queryError: false,\n      search: false,\n      selectedMovie: [],\n      select: false,\n      genre: [],\n    };\n  }\n\n  filterResult(data) {\n    return {\n      poster: data.poster_path,\n      rating: data.vote_average,\n      title: data.name ? data.name : data.title,\n      genre: this.gen(data.genre_ids),\n      released: data.release_date,\n      lang: data.original_language,\n      overview: data.overview,\n    };\n  }\n\n  onChange(e) {\n    const search = e.target.value;\n    const url = changeURL + `${search}&api_key=` + api;\n\n    if (search === \"\") {\n      this.setState({\n        movies: [],\n        select: false,\n        selectedMovie: [],\n      });\n      return;\n    }\n    axios\n      .get(url)\n      .then((res) => {\n        const results = res.data.results;\n        if (results) {\n          let movs = results.map((result) => {\n            return this.filterResult(result);\n          });\n          this.setState({\n            movies: movs,\n            search: true,\n            select: false,\n            selectedMovie: [],\n          });\n        }\n      })\n      .catch((err) => {\n        if (err) {\n          this.setState({ movies: {} });\n        }\n      });\n  }\n\n  genre() {\n    axios\n      .get(genreURL)\n      .then((res) => {\n        const results = res.data.genres;\n        this.setState({ genre: results });\n      })\n      .catch((err) => {\n        if (err) {\n          this.setState({\n            movies: {},\n          });\n        }\n      });\n  }\n\n  gen(genId) {\n    let x = [];\n    this.state.genre.map((samp) => {\n      genId.map((genre) => {\n        if (samp.id == genre) {\n          x.push(samp.name);\n        }\n      });\n    });\n    return x;\n  }\n\n  componentDidMount() {\n    this.genre();\n    axios\n      .get(mountURL)\n      .then((res) => {\n        const results = res.data.results;\n        if (results) {\n          let movs = results.map((result) => {\n            return this.filterResult(result);\n          });\n          this.setState({ movies: movs });\n        }\n      })\n      .catch((err) => {\n        if (err) {\n          this.setState({ movies: {} });\n        }\n      });\n  }\n\n  clickFallback() {\n    axios\n      .get(fallBackURL)\n      .then((res) => {\n        const results = res.data.results;\n        if (results) {\n          let movs = results.map((result) => {\n            return this.filterResult(result);\n          });\n          this.setState({\n            movies: movs,\n            search: false,\n          });\n        }\n      })\n      .catch((err) => {\n        if (err) {\n          this.setState({ movies: {} });\n        }\n      });\n  }\n\n  selectClick(m) {\n    this.setState({\n      select: !this.state.select,\n      selectedMovie: m,\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Input change={(e) => this.onChange(e)} />\n        <div className=\"body\">\n          {this.state.select ? (\n            <Details\n              movie={this.state.selectedMovie}\n              selClick={(e) => this.selectClick(e)}\n            />\n          ) : (\n            <Movie\n              movie={this.state.movies}\n              err={this.state.queryError}\n              search={this.state.search}\n              selClick={(e) => this.selectClick(e)}\n              click={(e) => this.clickFallback(e)}\n            />\n          )}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}